#ifndef P_DRAW
#define P_DRAW

/* INCLUDES ----------------------------------------------------------------------------------*/

#include "g:\mssdk\directx7\include\ddraw.h" // Remember to fix the path!
#include <windows.h> 

/* DEFINES -----------------------------------------------------------------------------------*/

#define		PD_VIRHE 100

#define		PD_TAUSTABUFFER 1000

/* PROTOTYPES --------------------------------------------------------------------------------*/

int	PisteDraw_Alusta(HWND &main_window_handle, HINSTANCE &hinstance_app, 
					 int leveys, int korkeus, int bpp,
					 int max_colors);
void	PisteDraw_Aseta_Klipperi(int vasen, int yla, int oikea, int ala);
int		PisteDraw_Buffer_Flip(int i);
int		PisteDraw_Buffer_Flip(int i, int x, int y, int vasen, int yla, int oikea, int ala);
int		PisteDraw_Buffer_Flip_Nopea(int lahde_index, int kohde_index, int x, int y, 
									int vasen, int yla, int oikea, int ala);
int		PisteDraw_Buffer_Tayta(int i, UCHAR color);
int		PisteDraw_Buffer_Tayta(int i, int vasen, int yla, int oikea, int ala, UCHAR color);
bool	PisteDraw_Buffer_Tuhoa(int i);
int		PisteDraw_Buffer_Uusi(int leveys, int korkeus, bool video_muisti, UCHAR color);
int		PisteDraw_Lataa_Kuva(int i, char *filename);
int		PisteDraw_Lopeta();
void	PisteDraw_Paivita_Naytto();


#endif

/* PisteDraw 0.1 */

/* INCLUDES ----------------------------------------------------------------------------------*/

#include "PisteDraw.h"
#include <io.h>
#include <fstream.h>
#include <mmsystem.h>
#include <malloc.h>
#include <memory.h>

/* DEFINES -----------------------------------------------------------------------------------*/

#define DD_INIT_STRUCT(ddstruct) { memset(&ddstruct,0,sizeof(ddstruct)); ddstruct.dwSize=sizeof(ddstruct); }
#define BITMAP_ID            0x4D42

/* TYPE DEFINITIONS ---------------------------------------------------------------------------*/

typedef unsigned short USHORT;
typedef unsigned short WORD;
typedef unsigned char  UCHAR;
typedef unsigned char  BYTE;

typedef struct BITMAP_FILE_TAG
{
	BITMAPFILEHEADER bitmapfileheader;  // this contains the bitmapfile header
	BITMAPINFOHEADER bitmapinfoheader;  // this is all the info including the palette
	PALETTEENTRY     palette[256];      // we will store the palette here
	UCHAR            *buffer;           // this is a pointer to the data

} BITMAP_FILE, *BITMAP_FILE_PTR;

typedef struct BITMAP_BUFFER_TAG
{
	LPDIRECTDRAWSURFACE4	lpdds;
	RECT					klipperi;
	int						leveys;
	int						korkeus;

} BITMAP_BUFFER, *BITMAP_BUFFER_PTR;

/* VARIABLES ---------------------------------------------------------------------------------*/

const int				MAX_NUMBER_OF_BUFFERS = 200;

HWND					PD_main_window_handle	= NULL; // globally track main window
HINSTANCE				PD_hinstance_app		= NULL; // globally track hinstance
HDC						PD_global_dc			= NULL; // tracks a global dc
					

LPDIRECTDRAW4			PD_lpdd         = NULL;   // dd object
LPDIRECTDRAWSURFACE4	PD_lpddsprimary = NULL;   // dd primary surface
LPDIRECTDRAWSURFACE4	PD_lpddsback1   = NULL;	  // eka taustapuskuri
LPDIRECTDRAWSURFACE4	PD_lpddsback2	= NULL;   // toka taustapuskuri
PALETTEENTRY			PD_palette[256];          // color palette
LPDIRECTDRAWPALETTE		PD_lpddpal      = NULL;   // a pointer to the created dd palette
DDSURFACEDESC2			PD_ddsd;                  // a direct draw surface description struct
DDBLTFX					PD_ddbltfx;               // used to fill
DDSCAPS2				PD_ddscaps;               // a direct draw surface capabilities struct
LPDIRECTDRAWSURFACE4	PD_buffers[MAX_NUMBER_OF_BUFFERS]; // taulukko kuvabuffereista

int						PD_ruudun_leveys;
int						PD_ruudun_korkeus;
int						PD_ruudun_bpp;
int						PD_max_varit;
RECT					PD_klipperi;						

/* PROTOTYPES --------------------------------------------------------------------------------*/

LPDIRECTDRAWSURFACE4 PisteDraw_Create_Surface(int width, int height, int mem_flags, UCHAR color);

int PisteDraw_Load_Bitmap(BITMAP_FILE_PTR bitmap, char *filename);

int PisteDraw_Flip_Bitmap(UCHAR *image, int bytes_per_line, int height);

int PisteDraw_Unload_Bitmap_File(BITMAP_FILE_PTR bitmap);

/* METHODS -----------------------------------------------------------------------------------*/

int	PisteDraw_Alusta(HWND &main_window_handle, HINSTANCE &hinstance_app, 
					 int leveys, int korkeus, int bpp,
					 int max_colors)
{
	
	PD_main_window_handle	= (HWND &)main_window_handle;
	PD_hinstance_app		= (HINSTANCE &)hinstance_app;
	PD_ruudun_leveys		= leveys;
	PD_ruudun_korkeus		= korkeus;
	PD_ruudun_bpp			= bpp;
	PD_max_varit			= max_colors;
	
	LPDIRECTDRAW temp = NULL;				 // väliaikainen rajapinta jolla haetaan uusin versio
	int i;

	if (FAILED(DirectDrawCreate(NULL, &temp, NULL)))	// luo rajapintaosoitin versioon 1.0
		return PD_VIRHE;

	if (FAILED(temp->QueryInterface(IID_IDirectDraw4,(LPVOID *)&PD_lpdd))) // osoitin v 4.0
		return PD_VIRHE;

	temp->Release();	// tuhotaan väliaikainen rajapinta
	temp = NULL;
	
	if (FAILED(PD_lpdd->SetCooperativeLevel(PD_main_window_handle, // Yhteistyö Windowsin kanssa..
		                                  DDSCL_FULLSCREEN | DDSCL_ALLOWMODEX |
										  DDSCL_EXCLUSIVE | DDSCL_ALLOWREBOOT)))
		return PD_VIRHE;
	
	if (FAILED(PD_lpdd->SetDisplayMode(PD_ruudun_leveys, PD_ruudun_korkeus, PD_ruudun_bpp,0,0)))
		return PD_VIRHE;

	DD_INIT_STRUCT(PD_ddsd);

	PD_ddsd.dwFlags				=	DDSD_CAPS | DDSD_BACKBUFFERCOUNT;
	PD_ddsd.dwBackBufferCount	=	2;				//Kolmoispuskurointi = primary + 2 taustapuskuria
	PD_ddsd.ddsCaps.dwCaps		=	DDSCAPS_PRIMARYSURFACE | DDSCAPS_COMPLEX | DDSCAPS_FLIP;
	
	if (FAILED(PD_lpdd->CreateSurface(&PD_ddsd, &PD_lpddsprimary, NULL)))
		return PD_VIRHE;
	
	PD_ddsd.ddsCaps.dwCaps = DDSCAPS_BACKBUFFER;
	if (FAILED(PD_lpddsprimary->GetAttachedSurface(&PD_ddsd.ddsCaps, &PD_lpddsback1)))
		return PD_VIRHE;

	PD_ddsd.ddsCaps.dwCaps = DDSCAPS_BACKBUFFER;
	if (FAILED(PD_lpddsprimary->GetAttachedSurface(&PD_ddsd.ddsCaps, &PD_lpddsback2)))
		return PD_VIRHE;

	for (i=1;i<255;i++)							//Luodaan 8-bittinen paletti
	{
		PD_palette[i].peRed		=	0;
		PD_palette[i].peGreen	=	0;
		PD_palette[i].peBlue	=	0;
		PD_palette[i].peFlags	=	PC_NOCOLLAPSE;
	}

	if (FAILED(PD_lpdd->CreatePalette(DDPCAPS_8BIT |
									DDPCAPS_ALLOW256 |
									DDPCAPS_INITIALIZE,
									PD_palette,
									&PD_lpddpal,
									NULL)))
		return PD_VIRHE;

	if (FAILED(PD_lpddsprimary->SetPalette(PD_lpddpal)))
		return PD_VIRHE;

	/*LIITETÄÄN KLIPPERI KUVAN REUNOJEN YLIKIRJOITUSTA ESTÄMÄÄN*/

	PisteDraw_Aseta_Klipperi(0, 0, leveys, korkeus);

	for (i=0;i<MAX_NUMBER_OF_BUFFERS;i++)		// alustetaan kuvabufferi taulukko
		PD_buffers[i] = NULL;

	return 0;
}

int	PisteDraw_Lopeta()
{

	int i;

	for (i=0;i<MAX_NUMBER_OF_BUFFERS;i++)
		PisteDraw_Buffer_Tuhoa(i);

	if (PD_lpddpal)
	{
		PD_lpddpal->Release();
	}

	if (PD_lpddsback2)
	{
		PD_lpddsback2->Release();
	} 

	if (PD_lpddsback1)
	{
		PD_lpddsback1->Release();
	} 

	if (PD_lpddsprimary)
	{
		PD_lpddsprimary->Release();
	} 

	if (PD_lpdd)
	{
		PD_lpdd->Release();
	}

	return 0;
}


int PisteDraw_Buffer_Uusi(int leveys, int korkeus, bool video_muisti, UCHAR color)
{
	int i = 0, 
		varaus;
	bool find = false;

	DDCAPS hel_caps, hal_caps;

	DD_INIT_STRUCT(hel_caps);
	DD_INIT_STRUCT(hal_caps);

	if (video_muisti)
	{
		varaus = DDSCAPS_VIDEOMEMORY;
	}
	else
	{
		varaus = DDSCAPS_SYSTEMMEMORY;
	}

	if (FAILED(PD_lpdd->GetCaps(&hal_caps,&hel_caps)))	
		return PD_VIRHE;

	if ((unsigned long)leveys*korkeus > hal_caps.dwVidMemFree)			//tarkastetaan riittääkö videomuistia
		varaus = DDSCAPS_SYSTEMMEMORY;

	while ((i < MAX_NUMBER_OF_BUFFERS) && !find)
	{
		if (PD_buffers[i] == NULL)
		{
			if ((PD_buffers[i] = PisteDraw_Create_Surface(leveys, korkeus, varaus, color)) != NULL)
			{
				find = true;
			}
			else
			{
				i = PD_VIRHE;
			}
		}
		else
		{
			i++;
		}
	}
	
	if (!find)
		i = PD_VIRHE;

	return i;
}

bool PisteDraw_Buffer_Tuhoa(int i)
{
	if (PD_buffers[i] != NULL)
	{
		PD_buffers[i]->Release();
		PD_buffers[i] = NULL;
	}
	else
		return false;

	return true;
}

int PisteDraw_Lataa_Kuva(int index, char *filename)
{
	BITMAP_FILE		bitmap;	

	if (PD_buffers[index])
	{
		if (PisteDraw_Load_Bitmap(&bitmap, filename) != 0)
			return PD_VIRHE;

		DD_INIT_STRUCT(PD_ddsd);
		
		if (FAILED(PD_buffers[index]->Lock(NULL,&PD_ddsd, DDLOCK_SURFACEMEMORYPTR | DDLOCK_WAIT,NULL)))
			return PD_VIRHE;

		UCHAR *back_buffer = (UCHAR *)PD_ddsd.lpSurface; 

		int x;
		int y;

		for (y=0;y<(int)PD_ruudun_korkeus;y++)
		{
			for (x=0;x<(int)PD_ruudun_leveys;x++)
			{
				back_buffer[x+y*PD_ddsd.lPitch] = bitmap.buffer[x+y*PD_ruudun_leveys];
			}
		}

		if (FAILED(PD_buffers[index]->Unlock(NULL)))
			return PD_VIRHE;


		PisteDraw_Unload_Bitmap_File(&bitmap);

		if (FAILED(PD_lpddpal->SetEntries(0,0,PD_max_varit, bitmap.palette)))
			return PD_VIRHE;

		for (int pi=0;pi<256;pi++)
		{
			PD_palette[pi].peBlue  = bitmap.palette[pi].peBlue;
			PD_palette[pi].peRed   = bitmap.palette[pi].peRed;
			PD_palette[pi].peGreen = bitmap.palette[pi].peGreen;
			PD_palette[pi].peFlags = bitmap.palette[pi].peFlags;
		}

	}
	else
		return PD_VIRHE;

	return 0;
}

int PisteDraw_Buffer_Flip(int i)
{
	DD_INIT_STRUCT(PD_ddsd);
	DD_INIT_STRUCT(PD_ddbltfx);

	RECT dest_rect;
	dest_rect.left	 =	0;
	dest_rect.right	 =	PD_ruudun_leveys;
	dest_rect.top	 =	0;
	dest_rect.bottom =	PD_ruudun_korkeus;

	if (FAILED(PD_lpddsback1->Blt(&dest_rect, 
							  PD_buffers[i],
							  &dest_rect, 
							  (DDBLT_WAIT | DDBLT_KEYSRC),
							  NULL)))
		return PD_VIRHE;	
	return 0;
}

int PisteDraw_Buffer_Flip(int i, int x, int y, int vasen, int yla, int oikea, int ala)
{
	DD_INIT_STRUCT(PD_ddsd);
	DD_INIT_STRUCT(PD_ddbltfx);

	int leveys  = oikea-vasen;
	int korkeus = ala-yla;

	if (x+leveys > PD_ruudun_leveys)
	{
		oikea = vasen + PD_ruudun_leveys-x;
	}

	if (x < 0)
	{
		vasen += x;
		x = 0;
	}

	if (y+korkeus > PD_ruudun_korkeus)
	{
		ala = yla + PD_ruudun_korkeus-y;
	}

	if (y < 0)
	{
		yla += y;
		y = 0;
	}

	if	(oikea>vasen && ala>yla)
	{
		RECT src_rect;
		src_rect.left		= vasen;
		src_rect.right		= oikea;
		src_rect.top		= yla;
		src_rect.bottom		= ala;

		RECT dest_rect;
		dest_rect.left		= x;
		dest_rect.right		= x + (oikea-vasen);
		dest_rect.top		= y;
		dest_rect.bottom	= y + (ala-yla);

		if (FAILED(PD_lpddsback1->Blt(&dest_rect, 
								  PD_buffers[i],
								  &src_rect, 
								  (DDBLT_WAIT | DDBLT_KEYSRC),
								  NULL)))
			return PD_VIRHE;	
	}

	return 0;
}
/*
int PisteDraw_Buffer_Flip_Nopea(int lahde_index, int kohde_index, int x, int y, 
							   int vasen, int yla, int oikea, int ala)
{
	DD_INIT_STRUCT(PD_ddsd);				//Alustetaan DirectX pintakuvaus
	DD_INIT_STRUCT(PD_ddbltfx);				//Alustetaan Blittaus tehosteet
	IDirectDrawSurface4 *lahde_buffer;		//Pointteri lahdebufferiin
	IDirectDrawSurface4 *kohde_buffer;		//Pointteri kohdebufferiin
	int leveys  = oikea-vasen;				//Apumuuttuja
	int korkeus = ala-yla;					//Apumuuttuja
	RECT source_rect;						//Neliö

	if (lahde_index == PD_BGBUFFER)			
		lahde_buffer = PD_lpddsback1;				//Jos lahde kuvabufferi on taustapuskuri
	else
		lahde_buffer = PD_buffers[lahde_index];		//Jos lahde kuvapuskuri on kuvapuskuri

	if (kohde_index == PD_BGBUFFER)
		kohde_buffer = PD_lpddsback1;				//Jos kohde kuvabufferi on taustapuskuri
	else
		kohde_buffer = PD_buffers[kohde_index];		//Jos kohde kuvapuskuri on kuvapuskuri
	
	if (x+leveys > PD_ruudun_leveys)
	{
		oikea = vasen + PD_ruudun_leveys-x;
	}

	if (x < 0)
	{
		vasen -= x;
		x = 0;
	}

	if (y+korkeus > PD_ruudun_korkeus)
	{
		ala = yla + PD_ruudun_korkeus-y;
	}

	if (y < 0)
	{
		yla -= y;
		y = 0;
	}

	if (oikea>vasen && ala>yla)
	{
		source_rect.left	=	vasen;
		source_rect.right	=	oikea;
		source_rect.top		=	yla;
		source_rect.bottom	=	ala;

		if (FAILED(kohde_buffer->BltFast(x, y, lahde_buffer, &source_rect,		//Blitataan kaikki paitsi 
								  (DDBLTFAST_WAIT | DDBLTFAST_SRCCOLORKEY))))	//läpinäkyvyysväri
			return PD_VIRHE;	
	}

	return 0;
}
*/
int PisteDraw_Buffer_Flip_Nopea(int lahde_index, int kohde_index, int x, int y, 
							   int vasen, int yla, int oikea, int ala)
{
	DD_INIT_STRUCT(PD_ddsd);				//Alustetaan DirectX pintakuvaus
	DD_INIT_STRUCT(PD_ddbltfx);				//Alustetaan Blittaus tehosteet
	IDirectDrawSurface4 *lahde_buffer;		//Pointteri lahdebufferiin
	IDirectDrawSurface4 *kohde_buffer;		//Pointteri kohdebufferiin
	int leveys  = oikea-vasen;				//Apumuuttuja
	int korkeus = ala-yla;					//Apumuuttuja
	RECT source_rect;						//Neliö

	if (lahde_index == PD_TAUSTABUFFER)			
		lahde_buffer = PD_lpddsback1;				//Jos lahde kuvabufferi on taustapuskuri
	else
		lahde_buffer = PD_buffers[lahde_index];		//Jos lahde kuvapuskuri on kuvapuskuri

	if (kohde_index == PD_TAUSTABUFFER)
		kohde_buffer = PD_lpddsback1;				//Jos kohde kuvabufferi on taustapuskuri
	else
		kohde_buffer = PD_buffers[kohde_index];		//Jos kohde kuvapuskuri on kuvapuskuri
	
	if (x+leveys > PD_klipperi.right)
	{
		oikea = vasen + PD_klipperi.right - x;
	}

	if (x < PD_klipperi.left)
	{
		vasen = vasen - x + PD_klipperi.left;
		x = PD_klipperi.left;
	}

	if (y+korkeus > PD_klipperi.bottom)
	{
		ala = yla + PD_klipperi.bottom - y;
	}

	if (y < PD_klipperi.top)
	{
		yla = yla - y + PD_klipperi.top;
		y = PD_klipperi.top;
	}

	if (oikea>vasen && ala>yla)
	{
		source_rect.left	=	vasen;
		source_rect.right	=	oikea;
		source_rect.top		=	yla;
		source_rect.bottom	=	ala;

		if (FAILED(kohde_buffer->BltFast(x, y, lahde_buffer, &source_rect,		//Blitataan kaikki paitsi 
								  (DDBLTFAST_WAIT | DDBLTFAST_SRCCOLORKEY))))	//läpinäkyvyysväri
			return PD_VIRHE;	
	}

	return 0;
}

int PisteDraw_Buffer_Tayta(int i, UCHAR color)
{
	DD_INIT_STRUCT(PD_ddbltfx);
	PD_ddbltfx.dwFillColor = color;	
	IDirectDrawSurface4 *buffer;

	if (i == PD_TAUSTABUFFER)
		buffer = PD_lpddsback1;
	else
		buffer = PD_buffers[i];
	
	RECT dest_rect;
	dest_rect.left	 =	0;
	dest_rect.right	 =	PD_ruudun_leveys;
	dest_rect.top	 =	0;
	dest_rect.bottom =	PD_ruudun_korkeus;	

	if (FAILED(buffer->Blt(&dest_rect, 
					 	   NULL, 
						   NULL, 
						   DDBLT_COLORFILL | DDBLT_WAIT, 
						   &PD_ddbltfx)))
		return PD_VIRHE;

	return 0;
}

int PisteDraw_Buffer_Tayta(int i, int vasen, int yla, int oikea, int ala, UCHAR color)
{
	DD_INIT_STRUCT(PD_ddbltfx);
	PD_ddbltfx.dwFillColor = color;	
	IDirectDrawSurface4 *buffer;

	if (i == PD_TAUSTABUFFER)
		buffer = PD_lpddsback1;
	else
		buffer = PD_buffers[i];

	RECT dest_rect;
	dest_rect.left	 =	vasen;
	dest_rect.right	 =	oikea;
	dest_rect.top	 =	yla;
	dest_rect.bottom =	ala;	

	if (FAILED(buffer->Blt(&dest_rect, 
					  	   NULL, 
						   NULL, 
						   DDBLT_COLORFILL | DDBLT_WAIT, 
						   &PD_ddbltfx)))
		return PD_VIRHE;

	return 0;
}

void PisteDraw_Aseta_Klipperi(int vasen, int yla, int oikea, int ala)
{
	PD_klipperi.left	= vasen;	
	PD_klipperi.right	= oikea;
	PD_klipperi.top		= yla;
	PD_klipperi.bottom	= ala;
}

void PisteDraw_Paivita_Naytto()
{
	while (FAILED(PD_lpddsprimary->Flip(NULL, DDFLIP_WAIT)));
}

///////// BMP-KUVATIEDOSTON LATAUSRUTIINIT //////////////////////////

int PisteDraw_Load_Bitmap(BITMAP_FILE_PTR bitmap, char *filename)
{
	int file_handle,  
		index;				

	UCHAR   *temp_buffer = NULL; 
	OFSTRUCT file_data; 

	if ((file_handle = OpenFile(filename,&file_data,OF_READ)) == -1)
		return 1; 

	_lread(file_handle, &bitmap->bitmapfileheader,sizeof(BITMAPFILEHEADER));
	
	if (bitmap->bitmapfileheader.bfType!=BITMAP_ID)
	{
		_lclose(file_handle);
		return 2;
	}

	_lread(file_handle, &bitmap->bitmapinfoheader,sizeof(BITMAPINFOHEADER));

	if (bitmap->bitmapinfoheader.biBitCount == 8)
	{
		_lread(file_handle, &bitmap->palette, PD_max_varit*sizeof(PALETTEENTRY));

		for (index=0; index < PD_max_varit; index++)
		{
			// reverse the red and green fields
			int temp_color                = bitmap->palette[index].peRed;
			bitmap->palette[index].peRed  = bitmap->palette[index].peBlue;
			bitmap->palette[index].peBlue = temp_color;
       
			bitmap->palette[index].peFlags = PC_NOCOLLAPSE;
		} 

    } 

	_lseek(file_handle,-(int)(bitmap->bitmapinfoheader.biSizeImage),SEEK_END);

	if (bitmap->bitmapinfoheader.biBitCount==8 || bitmap->bitmapinfoheader.biBitCount==16 || 
		bitmap->bitmapinfoheader.biBitCount==24)
	{

		if (!(bitmap->buffer = (UCHAR *)malloc(bitmap->bitmapinfoheader.biSizeImage)))
		{
			_lclose(file_handle);

			return 3;
		} 

		_lread(file_handle,bitmap->buffer,bitmap->bitmapinfoheader.biSizeImage);

	}
	else
		return 4;

	_lclose(file_handle);

	PisteDraw_Flip_Bitmap(bitmap->buffer, 
				bitmap->bitmapinfoheader.biWidth*(bitmap->bitmapinfoheader.biBitCount/8), 
				bitmap->bitmapinfoheader.biHeight);
	return 0;
} 


int PisteDraw_Unload_Bitmap_File(BITMAP_FILE_PTR bitmap)
{
	if (bitmap->buffer)
	{
		free(bitmap->buffer);

		bitmap->buffer = NULL;
	} 
	return 0;
} 


int PisteDraw_Flip_Bitmap(UCHAR *image, int bytes_per_line, int height)
{
	UCHAR *buffer; 
	int index;     

	if (!(buffer = (UCHAR *)malloc(bytes_per_line*height)))
		return 1;

	memcpy(buffer,image,bytes_per_line*height);

	for (index=0; index < height; index++)
		 memcpy(&image[((height-1) - index)*bytes_per_line],
         &buffer[index*bytes_per_line], bytes_per_line);

	free(buffer);

	return 0;
} 

LPDIRECTDRAWSURFACE4 PisteDraw_Create_Surface(int width, int height, int mem_flags, UCHAR color)
{
	LPDIRECTDRAWSURFACE4	lpdds;

	DD_INIT_STRUCT(PD_ddsd);

	PD_ddsd.dwFlags = DDSD_CAPS | DDSD_WIDTH | DDSD_HEIGHT;

	PD_ddsd.dwWidth		=	width;
	PD_ddsd.dwHeight	=	height;

	PD_ddsd.ddsCaps.dwCaps = DDSCAPS_OFFSCREENPLAIN | mem_flags;

	if (FAILED(PD_lpdd->CreateSurface(&PD_ddsd, &lpdds, NULL)))
		return(NULL);

	DDCOLORKEY color_key;
	color_key.dwColorSpaceLowValue	= color;
	color_key.dwColorSpaceHighValue = color;
	
	if(FAILED(lpdds->SetColorKey(DDCKEY_SRCBLT, &color_key)))
		return(NULL);

	return(lpdds);
}



